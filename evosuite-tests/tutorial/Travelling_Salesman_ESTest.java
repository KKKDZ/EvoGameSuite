/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 29 16:33:25 GMT 2023
 */

package tutorial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import tutorial.Travelling_Salesman;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Travelling_Salesman_ESTest extends Travelling_Salesman_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SystemInUtil.addInputLine("0");
      // Undeclared exception!
      try { 
        Travelling_Salesman.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("tutorial.Travelling_Salesman", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SystemInUtil.addInputLine("6");
      // Undeclared exception!
      try { 
        Travelling_Salesman.main((String[]) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[][] intArray0 = new int[13][9];
      int[] intArray1 = new int[9];
      intArray1[0] = 1;
      intArray0[1] = intArray1;
      boolean[] booleanArray0 = new boolean[11];
      int int0 = Travelling_Salesman.findHamiltonianCycle(intArray0, booleanArray0, 1, 1, 0, (-322), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[11];
      intArray1[0] = 242;
      intArray0[0] = intArray1;
      boolean[] booleanArray0 = new boolean[4];
      int int0 = Travelling_Salesman.findHamiltonianCycle(intArray0, booleanArray0, 0, 0, 0, 242, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Travelling_Salesman travelling_Salesman0 = new Travelling_Salesman();
  }
}
